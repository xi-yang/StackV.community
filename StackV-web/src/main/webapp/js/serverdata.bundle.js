(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["serverdata"],{

/***/ "./src/main/webapp/visual/data-model/server-data/server-data.js":
/*!**********************************************************************!*\
  !*** ./src/main/webapp/visual/data-model/server-data/server-data.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ \"./node_modules/@babel/runtime/helpers/interopRequireWildcard.js\");\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\"));\n\nvar _objectSpread2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectSpread */ \"./node_modules/@babel/runtime/helpers/objectSpread.js\"));\n\nvar _keys = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/object/keys */ \"./node_modules/@babel/runtime/core-js/object/keys.js\"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\"));\n\nvar _lodash = _interopRequireDefault(__webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\"));\n\nvar Utils = _interopRequireWildcard(__webpack_require__(/*! ./utils */ \"./src/main/webapp/visual/data-model/server-data/utils.js\"));\n\n/**\n * The function is trying to clean up the server side data for local DataModel\n *\n * The function would do these following steps\n *\n *\n * 1. Assign NODE-ID for better reference in Array\n * 2. Remove useless URL in KEY NAME\n * 3. Remove useless ONE-ELEMENT-ARRAY\n *\n * Few examples\n *\n * [1. ASSIGN-NODE-ID] NOTE: This function CHANGE the pass-in object, and RETURN NOTHING\n *\n * For example:\n * {\n *   \"aws-asia-s3\": {\n *     \"isAlias\": \"aws-na-s3\",\n *     \"hasNode\": [ ... ]\n *   }\n * }\n *\n * We would want to assign the ID to the node information body\n *\n * {\n *   \"aws-asia-s3\": {\n *     \"id\": \"aws-asia-s3\",  // I have an ID now, YAY\n *     \"isAlias\": \"aws-na-s3\",\n *     \"hasNode\": [ ... ]\n *   }\n * }\n */\nvar ServerData =\n/*#__PURE__*/\nfunction () {\n  function ServerData() {\n    (0, _classCallCheck2.default)(this, ServerData);\n  }\n\n  (0, _createClass2.default)(ServerData, null, [{\n    key: \"parse\",\n\n    /**\n     * Actually parse the server data for local Data Model, WE MIGHT MODIFY THE PASSED IN OBJECT\n     *\n     * @param {object} serverData - Javascript Object directly parsed from HTTP API request from StackV server\n     * @param {object} options - Extra parsing options (Not-Currently implemented)\n     * @returns {{ topLevel: Object.<string, object>, serverData: object }}\n     */\n    value: function parse(serverData) {\n      serverData = _lodash.default.cloneDeep(serverData); // preserve TOP_LEVEL Node data\n\n      var topLevelNodeIdList = (0, _keys.default)(serverData);\n      var serverDataKeyStructure = {};\n      var realServerData = {};\n      topLevelNodeIdList.forEach(function (topLevelNodeId) {\n        if (serverData[topLevelNodeId]) {\n          var innerData = JSON.parse(serverData[topLevelNodeId].json);\n          realServerData = (0, _objectSpread2.default)({}, realServerData, innerData);\n          serverDataKeyStructure[topLevelNodeId] = (0, _keys.default)(innerData);\n          serverDataKeyStructure[topLevelNodeId] = (0, _keys.default)(innerData);\n        } else {\n          serverDataKeyStructure[topLevelNodeId] = [];\n        }\n      });\n      var versionRecord = {};\n      topLevelNodeIdList.forEach(function (topLevelId) {\n        if (serverData[topLevelId] != null) {\n          versionRecord[topLevelId] = {\n            time: serverData[topLevelId].time,\n            uuid: serverData[topLevelId].uuid\n          };\n        } else {\n          versionRecord[topLevelId] = {\n            time: -1,\n            uuid: '30624700-30624770-534202-13942-43140624' // dummy uuid\n\n          };\n        }\n      });\n\n      ServerData._parseHelper(realServerData);\n\n      return {\n        topLevel: serverDataKeyStructure,\n        serverData: ServerData._simplifyFormat(realServerData),\n        versionRecord: versionRecord\n      };\n    }\n    /**\n     * Parse the server data recursively\n     *\n     * @param {object} serverData - Javascript Object directly parsed from HTTP API request from StackV server\n     * @private\n     */\n\n  }, {\n    key: \"_parseHelper\",\n    value: function _parseHelper(serverData) {\n      /**\n       * Server data must in this FORMAT\n       * {\n       *   \"NODE_ID_1\": { ... },\n       *   \"NODE_ID_2\": { ... },\n       * }\n       */\n      if (serverData !== null && (0, _typeof2.default)(serverData) === 'object') {\n        for (var keyName in serverData) {\n          if (serverData.hasOwnProperty(keyName)) {\n            // recursively parse data\n            ServerData._parseHelper(serverData[keyName]); // parse current object\n\n\n            if (Utils.shouldAssignNodeId(keyName)) {\n              // Assign NODE-ID (KEY NAME) to node information body\n              serverData[keyName].id = keyName;\n            } // remove weird keyName like http://schema.org/hasNode\n\n\n            if (Utils.containSchemaURL(keyName)) {\n              var newKeyName = Utils.removeSchemeURL(keyName);\n              serverData[newKeyName] = serverData[keyName];\n              delete serverData[keyName];\n              keyName = newKeyName;\n            }\n\n            if (Utils.containSchemaURL(serverData[keyName])) {\n              serverData[keyName] = Utils.removeSchemeURL(serverData[keyName]);\n            } // remove ONE-ELEMENT array, assign array[0] to top-level object\n\n\n            if (Utils.shouldRemoveOneElementArray(keyName)) {\n              // double check if the content is Array\n              if (Array.isArray(serverData[keyName])) {\n                if (serverData[keyName].length === 0) {\n                  serverData[keyName] = null;\n                } else {\n                  serverData[keyName] = serverData[keyName][0];\n                }\n              }\n            }\n\n            if ((0, _typeof2.default)(serverData[keyName]) === 'object' && !Array.isArray(serverData[keyName])) {\n              if (serverData[keyName].hasOwnProperty('value') && serverData[keyName].hasOwnProperty('type')) {\n                if ((0, _keys.default)(serverData[keyName]).length === 2) {\n                  if (serverData[keyName].type === 'uri' || serverData[keyName].type === 'bnode' || serverData[keyName].type === 'literal') {\n                    serverData[keyName] = serverData[keyName].value;\n                  }\n\n                  if (serverData[keyName].type === 'bnode') {// @todo implement the node reference for TAG NODES\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    /**\n     * Generate new format nodes\n     *\n     * @param {object} serverData - parsed server data\n     * @returns {object} KEY -> VALUE pair of new format nodes\n     * @private\n     */\n\n  }, {\n    key: \"_simplifyFormat\",\n    value: function _simplifyFormat(serverData) {\n      var data = {};\n\n      for (var keyName in serverData) {\n        if (serverData.hasOwnProperty(keyName)) {\n          data[keyName] = {\n            id: _lodash.default.uniqueId('node_'),\n            metadata: serverData[keyName]\n          };\n        }\n      }\n\n      return data;\n    }\n  }]);\n  return ServerData;\n}();\n\nvar _default = ServerData;\nexports.default = _default;\n\n//# sourceURL=webpack:///./src/main/webapp/visual/data-model/server-data/server-data.js?");

/***/ }),

/***/ "./src/main/webapp/visual/data-model/server-data/utils.js":
/*!****************************************************************!*\
  !*** ./src/main/webapp/visual/data-model/server-data/utils.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldRemoveOneElementArray = shouldRemoveOneElementArray;\nexports.containSchemaURL = containSchemaURL;\nexports.removeSchemeURL = removeSchemeURL;\nexports.shouldAssignNodeId = shouldAssignNodeId;\n\n/**\n * In some situation (XML convert to JSON issue), some KEY did contain an Array\n * with only 1 child element ONLY\n *\n * For better data modelling, we are removing those ONE-ELEMENT-ARRAY,\n * and replace the ONE-ELEMENT-ARRAY with the ONLY-CHILD data\n *\n * For example\n *\n * {\n *   \"id\": \"aws-asia-s3\",\n *   \"isAlias\": [ { value: \"aws-na-s3\" } ],  // Useless ONE-ELEMENT-ARRAY\n * }\n *\n * would become\n *\n * {\n *   \"id\": \"aws-asia-s3\",\n *   \"isAlias\": \"aws-na-s3\",  // REPLACE IT, YAY!\n * }\n *\n * @returns {boolean} Should replace ONE-ELEMENT-ARRAY OR not\n */\nfunction shouldRemoveOneElementArray(keyName) {\n  return shouldRemoveOneElementArray_keyList.indexOf(keyName) !== -1;\n}\n/**\n * Private constant for shouldRemoveArray(keyName) function\n *\n * @type {Array<string>}\n */\n\n\nvar shouldRemoveOneElementArray_keyList = ['value', 'type', 'name', 'isAlias', 'labeltype'];\n/**\n * Determine if the string have useless schema URL\n *\n * @param {string} str - A string\n * @returns {boolean} If the the string contains useless schema URL OR not\n */\n\nfunction containSchemaURL(str) {\n  return typeof str === 'string' && (str.startsWith('http://schemas.ogf.org') || str.startsWith('http://www.w3.org'));\n}\n/**\n * Remove the scheme URL in string\n * @param {string} str - A string\n * @returns {string} A string without scheme URL\n */\n\n\nfunction removeSchemeURL(str) {\n  return str.replace(/^http(.+)#/gi, '');\n}\n/**\n * Determine if the (Object) need to assign NODE-ID\n *\n * @param {string} keyName - (Object) KEY NAME\n * @returns {boolean} If the KEY NAME should assign a NODE-ID to information body OR not\n */\n\n\nfunction shouldAssignNodeId(keyName) {\n  return keyName.startsWith('urn:ogf') || keyName.startsWith('_:');\n}\n\n//# sourceURL=webpack:///./src/main/webapp/visual/data-model/server-data/utils.js?");

/***/ })

}]);