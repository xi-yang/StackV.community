openapi: 3.0.0
info:
  title: StackV API
  description: StackV Frontend REST API Documentation.
  version: "0.9.1"
servers:
  - url: 'https://k153.maxgigapop.net:8443/StackV-web/restapi/app'
    description: Frontend Local Server
tags:
  - name: drivers
    description: Driver management commands.
  - name: logging
    description: Logging retrieval commands.
  - name: service
    description: Service instance commands.
paths:
  '/driver/install':
    put:
      tags:
        - drivers
      summary: Install driver
      description: Install driver from raw backend JSON.
      requestBody:
        description: Driver manifest JSON
        content: {}
        required: true
      responses:
        '200':
          description: Successful driver plug.
          content:
            text/plain:
              schema:
                type: string
                example: PLUGIN SUCCEEDED
  '/driver/{user}/install/{topuri}':
    put:
      tags:
        - drivers
      summary: Install driver profile
      description: Install driver corresponding to saved frontend profile.
      parameters:
        - name: user
          in: path
          description: Username.
          required: true
          schema:
            type: string
        - name: topuri
          in: path
          description: Topology URI of saved profile.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful driver plug.
          content:
            text/plain:
              schema:
                type: string
                example: PLUGIN SUCCEEDED
  '/driver/{user}/add':
    put:
      tags:
        - drivers
      summary: Save driver profile
      description: Save new driver profile to DB.
      parameters:
        - name: user
          in: path
          description: Username.
          required: true
          schema:
            type: string
      requestBody:
        description: Driver profile JSON to be saved.
        content: {}
        required: true
      responses:
        '200':
          description: Saved profile successfully.
  '/driver/{user}/edit/{topuri}':
    put:
      tags:
        - drivers
      summary: Edit driver profile
      description: Edit existing driver profile.
      parameters:
        - name: user
          in: path
          description: Username.
          required: true
          schema:
            type: string
        - name: topuri
          in: path
          description: Topology URI of profile to be edited.
          required: true
          schema:
            type: string
      requestBody:
        description: Driver profile JSON.
        content: {}
        required: true
      responses:
        '200':
          description: Edited profile successfully.
          content:
            text/plain:
              schema:
                type: string
                example: Saved edits successfully.
  '/driver/{user}/delete/{topuri}':
    delete:
      tags:
        - drivers
      summary: Delete driver profile
      description: Delete existing driver profile.
      parameters:
        - name: user
          in: path
          description: Username.
          required: true
          schema:
            type: string
        - name: topuri
          in: path
          description: Topology URI of profile to be deleted.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted profile successfully.
  '/driver/{user}/getdetails/{topuri}':
    get:
      tags:
        - drivers
      summary: Get driver profile
      description: Retrieve existing driver profile.
      parameters:
        - name: user
          in: path
          description: Username.
          required: true
          schema:
            type: string
        - name: topuri
          in: path
          description: Topology URI of profile to be retrieved.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Retrieved profile successfully.
          content:
            application/json:
              schema: {}
              
  '/service/{siUUID}/status':
    get:
      tags:
        - service
      summary: Instance status
      description: Retrieve service instance superstatus and substatus.
      parameters:
        - name: siUUID
          in: path
          description: service instance UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful retrieval of service status
          content:
            text/plain:
              schema:
                type: string
                example: Create - READY
  '/service/{siUUID}/substatus':
    get:
      tags:
        - service
      summary: Instance substatus
      description: Retrieve only the service instance substatus.
      parameters:
        - name: siUUID
          in: path
          description: service instance UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful retrieval of service status
          content:
            text/plain:
              schema:
                type: string
                example: READY
  /service:
    post:
      tags:
        - service
      summary: Create service.
      description: Create a service instance.
      requestBody:
        description: Service creation JSON
        content: {}
        required: true
      responses:
        '200':
          description: Successful service creation
    get:
      tags:
        - service
      summary: Initialize service
      description: Retrieve a newly-generated service instance UUID from the backend.
      responses:
        '200':
          description: Successful service initialization
  '/service/{siUUID}/superstate/{state}':
    put:
      tags:
        - service
      summary: Force superstate shift
      description: Forcibly change the superstate of a service instance.
      parameters:
        - name: siUUID
          in: path
          description: service instance UUID
          required: true
          schema:
            type: string
        - name: state
          in: path
          description: new superstate
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful state modification
  '/service/{siUUID}/{action}':
    put:
      tags:
        - service
      summary: Operate service instance
      description: 'Execute a service operation, such as cancel or delete.'
      parameters:
        - name: siUUID
          in: path
          description: service instance UUID
          required: true
          schema:
            type: string
        - name: action
          in: path
          description: operation to be committed
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operation successfully started
    delete:
      tags:
        - service
      summary: Delete service instance
      description: Delete a service instance.
      parameters:
        - name: siUUID
          in: path
          description: service instance UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Instance successfully deleted
  '/service/{siUUID}/{action}/sync':
    put:
      tags:
        - service
      summary: Operate service instance (sync)
      description: 'Execute a service operation, such as cancel or delete, synchronously.'
      parameters:
        - name: siUUID
          in: path
          description: service instance UUID
          required: true
          schema:
            type: string
        - name: action
          in: path
          description: operation to be committed
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operation successfully started
  '/service/{siUUID}/call_verify':
    get:
      tags:
        - service
      summary: Single-run verify
      description: Retrieve current verification data of a service instance.
      parameters:
        - name: siUUID
          in: path
          description: service instance UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful retrieval of service status
          content:
            application/json:
              schema: {}
              
  '/logging/':
    get:
      tags:
        - logging
      summary: Get logging level
      description: Retrieve current system level.
      responses:
        '200':
          description: Successful retrieval of logging module.
          content:
            text/plain:
              schema:
                type: string
                example: TRACE        
  '/logging/{level}':
    put:
      tags:
        - logging
      summary: Set logging level
      description: Configure system logging level.
      parameters:
        - name: level
          in: path
          description: New logging level
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful configuration of logging module.
  '/logging/logs':
    get:
      tags:
        - logging
      summary: Get logs
      description: Retrieve logs according to query parameters.
      parameters:
        - name: refUUID
          in: query
          description: UUID of instance being queried.
          required: false
          schema:
            type: string
        - name: level
          in: query
          description: Logging level cutoff. (INFO will only return INFO, WARN, ERROR; etc.)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful retrieval of logging module.
          content:
            text/plain:
              schema:
                type: string
                example: TRACE   
      deprecated: true
  '/logging/logs/serverside':
    get:
      tags:
        - logging
      summary: Get logs
      description: Retrieve logs according to query parameters using serverside configuration.
      parameters:
        - name: refUUID
          in: query
          description: UUID of instance being queried.
          required: false
          schema:
            type: string
        - name: level
          in: query
          description: Logging level cutoff. (INFO will only return INFO, WARN, ERROR; etc.)
          required: false
          schema:
            type: string
        - name: draw
          in: query
          description: Draw request ID.
          required: false
          schema:
            type: integer
        - name: start
          in: query
          description: Starting row.
          required: false
          schema:
            type: integer
        - name: length
          in: query
          description: Size of data batch request.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful retrieval of logging module.
          content:
            text/plain:
              schema:
                type: string
                example: TRACE   
              
components:
  securitySchemes:
    keycloak1:
      type: oauth2
      description: Keycloak OAuth2 Endpoint.
      flows:
        password:
          tokenUrl: >-
            https://k152.maxgigapop.net:8543/auth/realms/StackV/protocol/openid-connect/token
          refreshUrl: >-
            https://k152.maxgigapop.net:8543/auth/realms/StackV/protocol/openid-connect/token
          scopes: {}
      
      
security:
  - keycloak: []