/*
 * Copyright (c) 2013-2016 University of Maryland
 * Created by: Xi Yang 2016

 * Permission is hereby granted, free of charge, to any person obtaining a copy 
 * of this software and/or hardware specification (the “Work”) to deal in the 
 * Work without restriction, including without limitation the rights to use, 
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of 
 * the Work, and to permit persons to whom the Work is furnished to do so, 
 * subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Work.

 * THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS  
 * IN THE WORK.
 */
package net.maxgigapop.mrs.rest.api;

public class ManifestTemplate {

    final static public String jsonTemplateDNC = "{\n"
            + "	\"service_type\" : \"DNC\",\n"
            + "	\"switching_subnets\": [\n"
            + "		{\n"
            + "			\"subnets\": [\n"
            + "				{\n"
            + "					\"name\": \"?subnet?\",\n"
            + "					\"switching_ports\": [\n"
            + "						{\n"
            + "							\"name\": \"?terminal?\",\n"
            + "							\"vlan\": \"?terminal_vlan?\",\n"
            + "							\"sparql\": \"SELECT ?terminal ?terminal_vlan WHERE { ?subnet nml:hasBidirectionalPort ?terminal. ?terminal nml:hasLabel ?vlan. ?vlan nml:value ?terminal_vlan. }\",\n"
            + "							\"required\": \"true\"\n"
            + "						}\n"
            + "					],\n"
            + "					\"sparql\": \"SELECT ?subnet WHERE { ?subnet a mrs:SwitchingSubnet. }\",\n"
            + "					\"required\": \"true\"\n"
            + "				}\n"
            + "			]\n"
            + "		}\n"
            + "	]\n"
            + "}";

    final static public String jsonTemplateAHC = "{\n"
            + "	\"service_type\": \"AHC\",\n"
            + "	\"virtual_clouds\": {\n"
            + "		\"public_cloud\": {\n"
            + "			\"name\": \"?vpc?\",\n"
            + "			\"cidr\": \"?vpc_cidr?\",\n"
            + "			\"subnets\": [\n"
            + "				{\n"
            + "					\"name\": \"?subnet?\",\n"
            + "					\"cidr\": \"?subnet_cidr?\",\n"
            + "					\"virtual_machines\": [\n"
            + "						{\n"
            + "							\"name\": \"?vm?\",\n"
            + "							\"private_ip\": \"?vm_private_ip?\",\n"
            + "							\"instruction\": \"To access the VM: ssh -i ?vm_keyname? ec2_user@?vm_public_ip? \",\n"
            + "							\"sparql\": \"SELECT ?vm ?vm_keyname ?vm_keyname ?vm_public_ip ?vm_private_ip WHERE { ?subnet nml:hasBidirectionalPort ?vm_eth0. ?vm  nml:hasBidirectionalPort ?vm_eth0. ?ec2 mrs:providesVM ?vm. ?vm_eth0 mrs:hasNetworkAddress ?vm_private_na. ?vm_private_na mrs:type \\\"ipv4:private\\\". ?vm_private_na mrs:value ?vm_private_ip. OPTIONAL { ?vm mrs:type ?vm_keyname. FILTER (regex(?vm_keyname,'^keypair.+$')) } OPTIONAL { ?vm mrs:hasNetworkAddress ?vm_public_na.?vm_public_na mrs:type \\\"ipv4:public\\\".  ?vm_public_na mrs:value ?vm_public_ip. } }\",\n"
            + "							\"required\": \"false\"\n"
            + "						}\n"
            + "					],\n"
            + "					\"instruction\": \"\",\n"
            + "					\"sparql\": \"SELECT ?subnet ?subnet_cidr WHERE {?vpc nml:hasService ?vpc_sw_svc. ?vpc_sw_svc mrs:providesSubnet ?subnet. ?subnet mrs:hasNetworkAddress ?subnet_na. ?subnet_na mrs:value ?subnet_cidr.}\",\n"
            + "					\"required\": \"false\"\n"
            + "				}\n"
            + "			],\n"
            + "			\"sparql\": \"SELECT ?vpc_cidr WHERE { ?vpc nml:hasService ?vpc_rt_svc. ?vpc_rt_svc mrs:providesRoute ?vpc_local_rt. ?vpc_local_rt mrs:nextHop \\\"local\\\". ?vpc_local_rt mrs:routeTo ?vpc_cidr_na. ?vpc_cidr_na mrs:type \\\"ipv4-prefix\\\". ?vpc_cidr_na  mrs:value ?vpc_cidr. }\",\n"
            + "			\"required\": \"true\"\n"
            + "		},\n"
            + "		\"private_cloud\": {\n"
            + "			\"name\": \"?vtn?\",\n"
            + "			\"subnets\": [\n"
            + "				{\n"
            + "					\"name\": \"?subnet?\",\n"
            + "					\"cidr\": \"?subnet_cidr?\",\n"
            + "					\"virtual_machines\": [\n"
            + "						{\n"
            + "							\"name\": \"?vm?\",\n"
            + "							\"private_ip\": \"?vm_private_ip?\",\n"
            + "							\"instruction\": \"To access the VM: ssh -i ?vm_keyname? user@?vm_public_ip? \",\n"
            + "							\"sparql\": \"SELECT ?vm ?vm_keyname ?vm_keyname ?vm_public_ip ?vm_private_ip WHERE { ?subnet nml:hasBidirectionalPort ?vm_eth0. ?vm  nml:hasBidirectionalPort ?vm_eth0. ?ec2 mrs:providesVM ?vm. ?vm_eth0 mrs:hasNetworkAddress ?vm_private_na. ?vm_private_na mrs:type \\\"ipv4:private\\\". ?vm_private_na mrs:value ?vm_private_ip. OPTIONAL { ?vm mrs:type ?vm_keyname. FILTER (regex(?vm_keyname,'^keypair.+$')) } OPTIONAL { ?vm nml:hasBidirectionalPort ?vm_eth0. ?vm_eth0 mrs:hasNetworkAddress ?vm_public_na.?vm_public_na mrs:type \\\"floating-ip\\\".  ?vm_public_na mrs:value ?vm_public_ip. } }\",\n"
            + "							\"required\": \"false\",\n"
            + "							\"sriov_vnics\": [\n"
            + "								{\n"
            + "									\"name\": \"?vnic?\",\n"
            + "									\"port_profile\": \"?port_profile?\",\n"
            + "									\"ip_address\": \"?vnic_ipv4?\",\n"
            + "									\"mac_ddress\": \"?vnic_mac?\",\n"
            + "									\"sparql\": \"SELECT ?vnic ?vnic_mac ?vnic_ipv4  WHERE { ?vm nml:hasBidirectionalPort ?vnic. ?vmfex mrs:providesVNic ?vnic. OPTIONAL { ?vnic mrs:hasNetworkAddress ?vnic_mac_na. ?vnic_mac_na mrs:type \\\"mac-address\\\". ?vnic_mac_na mrs:value ?vnic_mac. } OPTIONAL { ?vnic mrs:hasNetworkAddress ?vnic_ipv4_na. ?vnic_ipv4_na mrs:type \\\"ipv4-address\\\". ?vnic_ipv4_na mrs:value ?vnic_ipv4. } }\",\n"
            + "									\"sparql-ext\": \"SELECT ?port_profile WHERE { ?sw_profile nml:hasBidirectionalPort ?vnic. ?sw_profile a mrs:SwitchingSubnet. ?sw_profile mrs:type \\\"Cisco_UCS_Port_Profile\\\".  ?sw_profile mrs:value ?port_profile. }\",\n"
            + "									\"required\": \"false\"\n"
            + "								}\n"
            + "							],\n"
            + "							\"ceph_rbds\": [\n"
            + "								{\n"
            + "									\"name\": \"?vol?\",\n"
            + "									\"size (GB)\": \"?vol_gb?\",\n"
            + "									\"mount_point\": \"?vol_mount?\",\n"
            + "									\"sparql\": \"SELECT ?vol WHERE { ?vm mrs:hasVolume ?vol. ?rbd_svc mrs:providesVolume ?vol. }\",\n"
            + "									\"sparql-ext\": \"SELECT ?vol_gb ?vol_mount WHERE { ?rbd_svc mrs:providesVolume ?vol. ?rbd_svc mrs:type \\\"ceph-rbd\\\". ?vol mrs:disk_gb ?vol_gb. ?vol mrs:mount_point ?vol_mount. }\",\n"
            + "									\"required\": \"false\"\n"
            + "								}\n"
            + "							]\n"
            + "						}\n"
            + "					],\n"
            + "					\"instruction\": \"\",\n"
            + "					\"sparql\": \"SELECT ?subnet ?subnet_cidr WHERE {?vtn nml:hasService ?vtn_sw_svc. ?vtn_sw_svc mrs:providesSubnet ?subnet. ?subnet mrs:hasNetworkAddress ?subnet_na. ?subnet_na mrs:type \\\"ipv4-prefix\\\". ?subnet_na mrs:value ?subnet_cidr.}\",\n"
            + "					\"required\": \"false\"\n"
            + "				}\n"
            + "			]\n"
            + "		},\n"
            + "		\"intercloud_connection\": {\n"
            + "			\"virtual_private_gateway\": \"?vgw?\",\n"
            + "			\"direct_connect_vlan\": \"?dxvlan?\",\n"
            + "			\"external_l2_path\": [\n"
            + "				{\n"
            + "					\"switch_port\": \"?extport?\",\n"
            + "					\"vlan\": \"?extport_vlan?\",\n"
            + "					\"sparql\": \"SELECT ?extport ?extport_vlan WHERE {?ext_sw_svc mrs:providesSubnet ?ext_subnet. ?ext_subnet nml:hasBidirectionalPort ?vlan_port. ?vlan_port nml:hasLabel ?vlan_label. ?vlan_label nml:value \\\"?dxvlan?\\\". ?extport nml:hasBidirectionalPort ?vlan_port. ?vlan_port nml:hasLabel ?vlan_port_label. ?vlan_port_label nml:value ?extport_vlan. FILTER (?ext_subnet != ?extport)}\",\n"
            + "					\"required\": \"true\"\n"
            + "				}\n"
            + "			],\n"
            + "			\"instruction\": \"\",\n"
            + "			\"sparql\": \"SELECT ?vgw ?dxvlan ?extport WHERE {?vpc nml:hasBidirectionalPort ?vgw. ?vgw nml:isAlias ?dxvif. ?dxvif mrs:type \\\"direct-connect-vif\\\". ?dxvif nml:hasLabel ?dxvif_label. ?dxvif_label nml:value ?dxvlan.}\",\n"
            + "			\"required\": \"false\"\n"
            + "		},\n"
            + "		\"sparql\": \"SELECT ?vpc ?vtn WHERE {?aws nml:hasTopology ?vpc. ?ops nml:hasTopology ?vtn. ?vpc nml:hasBidirectionalPort ?vgw. ?vgw mrs:type \\\"vpn-gateway\\\". FILTER ( ?vpc != ?vtn ) }\",\n"
            + "		\"required\": \"true\"\n"
            + "	}\n"
            + "}";

    final static public String jsonTemplateAWS = "{\n"
            + "	\"service_type\": \"VCN-AWS\",\n"
            + "	\"virtual_clouds\": [\n"
            + "		{\n"
            + "			\"name\": \"?vpc?\",\n"
            + "			\"cidr\": \"?vpc_cidr?\",\n"
            + "			\"external_connection\": {\n"
            + "				\"virtual_private_gateway\": \"?vgw?\",\n"
            + "				\"direct_connect_vlan\": \"?dxvlan?\",\n"
            + "				\"external_l2_path\": [\n"
            + "					{\n"
            + "						\"switch_port\": \"?extport?\",\n"
            + "						\"vlan\": \"?extport_vlan?\",\n"
            + "						\"sparql\": \"SELECT ?extport ?extport_vlan WHERE {?ext_sw_svc mrs:providesSubnet ?ext_subnet. ?ext_subnet nml:hasBidirectionalPort ?vlan_port. ?vlan_port nml:hasLabel ?vlan_label. ?vlan_label nml:value \\\"?dxvlan?\\\". ?extport nml:hasBidirectionalPort ?vlan_port. ?vlan_port nml:hasLabel ?vlan_port_label. ?vlan_port_label nml:value ?extport_vlan. FILTER (?ext_subnet != ?extport)}\",\n"
            + "						\"required\": \"true\"\n"
            + "					}\n"
            + "				],\n"
            + "				\"instruction\": \"\",\n"
            + "				\"sparql\": \"SELECT ?vgw ?dxvlan ?extport WHERE {?vpc nml:hasBidirectionalPort ?vgw. ?vgw nml:isAlias ?dxvif. ?dxvif mrs:type \\\"direct-connect-vif\\\". ?dxvif nml:hasLabel ?dxvif_label. ?dxvif_label nml:value ?dxvlan.}\",\n"
            + "				\"required\": \"false\"\n"
            + "			},\n"
            + "			\"subnets\": [\n"
            + "				{\n"
            + "					\"name\": \"?subnet?\",\n"
            + "					\"cidr\": \"?subnet_cidr?\",\n"
            + "					\"virtual_machines\": [\n"
            + "						{\n"
            + "							\"name\": \"?vm?\",\n"
            + "							\"private_ip\": \"?vm_private_ip?\",\n"
            + "							\"instruction\": \"To access the VM: ssh -i ?vm_keyname? ec2_user@?vm_public_ip? \",\n"
            + "							\"sparql\": \"SELECT ?vm ?vm_keyname ?vm_keyname ?vm_public_ip ?vm_private_ip WHERE { ?subnet nml:hasBidirectionalPort ?vm_eth0. ?vm  nml:hasBidirectionalPort ?vm_eth0. ?ec2 mrs:providesVM ?vm. ?vm_eth0 mrs:hasNetworkAddress ?vm_private_na. ?vm_private_na mrs:type \\\"ipv4:private\\\". ?vm_private_na mrs:value ?vm_private_ip. OPTIONAL { ?vm mrs:type ?vm_keyname. FILTER (regex(?vm_keyname,'^keypair.+$')) } OPTIONAL { ?vm mrs:hasNetworkAddress ?vm_public_na.?vm_public_na mrs:type \\\"ipv4:public\\\".  ?vm_public_na mrs:value ?vm_public_ip. } }\",\n"
            + "							\"required\": \"false\"\n"
            + "						}\n"
            + "					],\n"
            + "					\"instruction\": \"\",\n"
            + "					\"sparql\": \"SELECT ?subnet ?subnet_cidr WHERE {?vpc nml:hasService ?vpc_sw_svc. ?vpc_sw_svc mrs:providesSubnet ?subnet. ?subnet mrs:hasNetworkAddress ?subnet_na. ?subnet_na mrs:value ?subnet_cidr.}\",\n"
            + "					\"required\": \"false\"\n"
            + "				}\n"
            + "			]\n"
            + "		}\n"
            + "	],\n"
            + "	\"sparql\": \"SELECT ?vpc ?vpc_cidr WHERE {?aws nml:hasTopology ?vpc. ?vpc_svc mrs:providesVPC ?vpc. ?vpc nml:hasService ?vpc_rt_svc. ?vpc_rt_svc mrs:providesRoute ?vpc_local_rt. ?vpc_local_rt mrs:nextHop \\\"local\\\". ?vpc_local_rt mrs:routeTo ?vpc_cidr_na. ?vpc_cidr_na mrs:type \\\"ipv4-prefix\\\". ?vpc_cidr_na  mrs:value ?vpc_cidr. }\",\n"
            + "	\"required\": \"true\"\n"
            + "}";

    final static public String jsonTemplateOPS = "{\n"
            + "	\"service_type\": \"VCN-OPS\",\n"
            + "	\"virtual_clouds\": [\n"
            + "		{\n"
            + "			\"name\": \"?vpc?\",\n"
            + "			\"subnets\": [\n"
            + "				{\n"
            + "					\"name\": \"?subnet?\",\n"
            + "					\"cidr\": \"?subnet_cidr?\",\n"
            + "					\"virtual_machines\": [\n"
            + "						{\n"
            + "							\"name\": \"?vm?\",\n"
            + "							\"private_ip\": \"?vm_private_ip?\",\n"
            + "							\"instruction\": \"To access the VM: ssh -i ?vm_keyname? user@?vm_public_ip? \",\n"
            + "							\"sparql\": \"SELECT ?vm ?vm_keyname ?vm_keyname ?vm_public_ip ?vm_private_ip WHERE { ?subnet nml:hasBidirectionalPort ?vm_eth0. ?vm  nml:hasBidirectionalPort ?vm_eth0. ?ec2 mrs:providesVM ?vm. ?vm_eth0 mrs:hasNetworkAddress ?vm_private_na. ?vm_private_na mrs:type \\\"ipv4:private\\\". ?vm_private_na mrs:value ?vm_private_ip. OPTIONAL { ?vm mrs:type ?vm_keyname. FILTER (regex(?vm_keyname,'^keypair.+$')) } OPTIONAL { ?vm nml:hasBidirectionalPort ?vm_eth0. ?vm_eth0 mrs:hasNetworkAddress ?vm_public_na.?vm_public_na mrs:type \\\"floating-ip\\\".  ?vm_public_na mrs:value ?vm_public_ip. } }\",\n"
            + "							\"required\": \"false\",\n"
            + "							\"sriov_vnics\": [\n"
            + "								{\n"
            + "									\"name\": \"?vnic?\",\n"
            + "									\"port_profile\": \"?port_profile?\",\n"
            + "									\"ip_address\": \"?vnic_ipv4?\",\n"
            + "									\"mac_address\": \"?vnic_mac?\",\n"
            + "									\"sparql\": \"SELECT ?vnic ?vnic_mac ?vnic_ipv4  WHERE { ?vm nml:hasBidirectionalPort ?vnic. ?vmfex mrs:providesVNic ?vnic. OPTIONAL { ?vnic mrs:hasNetworkAddress ?vnic_mac_na. ?vnic_mac_na mrs:type \\\"mac-address\\\". ?vnic_mac_na mrs:value ?vnic_mac. } OPTIONAL { ?vnic mrs:hasNetworkAddress ?vnic_ipv4_na. ?vnic_ipv4_na mrs:type \\\"ipv4-address\\\". ?vnic_ipv4_na mrs:value ?vnic_ipv4. } }\",\n"
            + "									\"sparql-ext\": \"SELECT ?port_profile WHERE { ?sw_profile nml:hasBidirectionalPort ?vnic. ?sw_profile a mrs:SwitchingSubnet. ?sw_profile mrs:type \\\"Cisco_UCS_Port_Profile\\\".  ?sw_profile mrs:value ?port_profile. }\",\n"
            + "									\"required\": \"false\"\n"
            + "								}\n"
            + "							],\n"
            + "							\"ceph_rbd\": [\n"
            + "								{\n"
            + "									\"name\": \"?vol?\",\n"
            + "									\"size_gb\": \"?vol_gb?\",\n"
            + "									\"mount_point\": \"?vol_mount?\",\n"
            + "									\"sparql\": \"SELECT ?vol ?rbd_svc WHERE { ?vm mrs:hasVolume ?vol. ?rbd_svc mrs:providesVolume ?vol. }\",\n"
            + "									\"sparql-ext\": \"SELECT ?vol_gb ?vol_mount WHERE { ?rbd_svc a mrs:BlockStorageService. ?rbd_svc mrs:type \\\"ceph-rbd\\\". ?vol mrs:disk_gb ?vol_gb. ?vol mrs:mount_point ?vol_mount. }\",\n"
            + "									\"required\": \"false\"\n"
            + "								}\n"
            + "							]\n"
            + "						}\n"
            + "					],\n"
            + "					\"instruction\": \"\",\n"
            + "					\"sparql\": \"SELECT ?subnet ?subnet_cidr WHERE {?vpc nml:hasService ?vpc_sw_svc. ?vpc_sw_svc mrs:providesSubnet ?subnet. ?subnet mrs:hasNetworkAddress ?subnet_na. ?subnet_na mrs:type \\\"ipv4-prefix\\\". ?subnet_na mrs:value ?subnet_cidr.}\",\n"
            + "					\"required\": \"false\"\n"
            + "				}\n"
            + "			]\n"
            + "		}\n"
            + "	],\n"
            + "	\"sparql\": \"SELECT ?vpc ?vpc_cidr WHERE {?ops nml:hasTopology ?vpc. ?vpc_svc mrs:providesVPC ?vpc.}\",\n"
            + "	\"required\": \"true\"\n"
            + "}";

}
